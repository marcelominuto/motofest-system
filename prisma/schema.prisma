generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Evento {
  id           Int           @id @default(autoincrement())
  nome         String
  dataInicio   DateTime
  dataFim      DateTime
  ativo        Boolean       @default(false)
  ingressos    Ingresso[]
  horarios     Horario[]
  agendamentos Agendamento[]
  pedidos      Pedido[]
  cortesias    Cortesia[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Ingresso {
  id         Int      @id @default(autoincrement())
  eventoId   Int
  tipo       String
  descricao  String?
  valor      Decimal?  // usado só para "normal"
  valor1     Decimal?  // usado para "test ride"
  valor2     Decimal?
  valor3     Decimal?
  limite     Int?
  categoria  String
  link       String? // link para ingresso normal
  evento     Evento    @relation(fields: [eventoId], references: [id])
  agendamentos Agendamento[]
  motos      Moto[]   // ← nova relação
}

model Marca {
  id        Int        @id @default(autoincrement())
  nome      String     @unique
  motos     Moto[]
  cortesias Cortesia[]
}

model Moto {
  id           Int           @id @default(autoincrement())
  marcaId      Int
  ingressoId   Int           // ← novo campo
  nome         String
  quantidade   Int
  categoria    String
  marca        Marca         @relation(fields: [marcaId], references: [id])
  ingresso     Ingresso      @relation(fields: [ingressoId], references: [id]) // ← nova relação
  agendamentos Agendamento[]
}

model Cliente {
  id           Int           @id @default(autoincrement())
  nome         String
  email        String
  cpf          String        @unique
  cnh          String
  telefone     String?
  agendamentos Agendamento[]
  pedidos      Pedido[]
  mobilidades  Mobilidade[]  // relação inversa para Mobilidade
}

model Horario {
  id           Int           @id @default(autoincrement())
  hora         String
  eventoId     Int
  evento       Evento        @relation(fields: [eventoId], references: [id])
  agendamentos Agendamento[]
}

model Agendamento {
  id         Int      @id @default(autoincrement())
  clienteId  Int
  ingressoId Int
  motoId     Int
  data       DateTime
  horarioId  Int
  eventoId   Int
  pedidoId   Int?     // ← novo campo opcional para vincular a pedidos
  codigo     String   @unique
  status     String   @default("pendente") // pago, pendente, cortesia, checkin
  checkin    Boolean  @default(false)

  cliente  Cliente  @relation(fields: [clienteId], references: [id])
  ingresso Ingresso @relation(fields: [ingressoId], references: [id])
  moto     Moto     @relation(fields: [motoId], references: [id])
  horario  Horario  @relation(fields: [horarioId], references: [id])
  evento   Evento   @relation(fields: [eventoId], references: [id])
  pedido   Pedido?  @relation(fields: [pedidoId], references: [id]) // ← nova relação
}

model Pedido {
  id                 Int      @id @default(autoincrement())
  clienteId          Int
  eventoId           Int
  valor              Decimal
  status             String   @default("pendente") // pago, pendente, cancelado, abandonado
  createdAt          DateTime @default(now())
  codigo             String   @unique // <-- novo campo para referência do pedido
  metodoPagamento   String?
  paymentIntentId    String?

  cliente      Cliente       @relation(fields: [clienteId], references: [id])
  evento       Evento        @relation(fields: [eventoId], references: [id])
  agendamentos Agendamento[] // ← nova relação
}

model Cortesia {
  id        Int     @id @default(autoincrement())
  eventoId  Int
  marcaId   Int?   // agora pode ser nulo
  codigo    String  @unique
  utilizado Boolean @default(false)

  evento Evento @relation(fields: [eventoId], references: [id])
  marca  Marca? @relation(fields: [marcaId], references: [id])
}

model Admin {
  id        Int      @id @default(autoincrement())
  nome      String
  email     String   @unique
  senha     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mobilidade {
  id        Int    @id @default(autoincrement())
  clienteId Int
  marcas    String

  cliente   Cliente @relation(fields: [clienteId], references: [id])
}
